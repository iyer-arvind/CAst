# - Find yacc executable and provides a macro to generate custom build rules
#
# The module defines the following variables:
#  YACC_FOUND - true is yacc executable is found
#  YACC_EXECUTABLE - the path to the yacc executable
#  YACC_VERSION - the version of yacc
#  YACC_LIBRARIES - The yacc libraries
#
# The minimum required version of yacc can be specified using the
# standard syntax, e.g. FIND_PACKAGE(YACC 2.5.13)
#
#
# If yacc is found on the system, the module provides the macro:
#  YACC_TARGET(Name FlexInput FlexOutput [COMPILE_FLAGS <string>])
# which creates a custom command  to generate the <FlexOutput> file from
# the <FlexInput> file.  If  COMPILE_FLAGS option is specified, the next
# parameter is added to the yacc  command line. Name is an alias used to
# get  details of  this custom  command.  Indeed the  macro defines  the
# following variables:
#  YACC_${Name}_DEFINED - true is the macro ran successfully
#  YACC_${Name}_OUTPUTS - the source file generated by the custom rule, an
#  alias for FlexOutput
#  YACC_${Name}_INPUT - the yacc source file, an alias for ${FlexInput}
#
# Flex scanners oftenly use tokens  defined by Bison: the code generated
# by Flex  depends of the header  generated by Bison.   This module also
# defines a macro:
#  ADD_YACC_BISON_DEPENDENCY(FlexTarget BisonTarget)
# which  adds the  required dependency  between a  scanner and  a parser
# where  <FlexTarget>  and <BisonTarget>  are  the  first parameters  of
# respectively YACC_TARGET and BISON_TARGET macros.
#
#  ====================================================================
#  Example:
#
#   find_package(BISON)
#   find_package(YACC)
#
#   BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)
#   YACC_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp)
#   ADD_YACC_BISON_DEPENDENCY(MyScanner MyParser)
#
#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
#   add_executable(Foo
#      Foo.cc
#      ${BISON_MyParser_OUTPUTS}
#      ${YACC_MyScanner_OUTPUTS}
#   )
#  ====================================================================

#=============================================================================
# Copyright 2009 Kitware, Inc.
# Copyright 2006 Tristan Carel
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distribute this file outside of CMake, substitute the full
#  License text for the above reference.)

FIND_PROGRAM(YACC_EXECUTABLE yacc DOC "path to the yacc executable")
MARK_AS_ADVANCED(YACC_EXECUTABLE)

FIND_LIBRARY(FL_LIBRARY NAMES fl
  DOC "path to the fl library")
MARK_AS_ADVANCED(FL_LIBRARY)
SET(YACC_LIBRARIES ${FL_LIBRARY})

IF(YACC_EXECUTABLE)

  EXECUTE_PROCESS(COMMAND ${YACC_EXECUTABLE} -V
    OUTPUT_VARIABLE YACC_version_output
    ERROR_VARIABLE YACC_version_error
    RESULT_VARIABLE YACC_version_result
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF(NOT ${YACC_version_result} EQUAL 0)
    IF(YACC_FIND_REQUIRED)
      MESSAGE(SEND_ERROR "Command \"${YACC_EXECUTABLE} --version\" failed with output:\n${YACC_version_output}\n${YACC_version_error}")
    ELSE()
      MESSAGE("Command \"${YACC_EXECUTABLE} --version\" failed with output:\n${YACC_version_output}\n${YACC_version_error}\nYACC_VERSION will not be available")
    ENDIF()
  ELSE()
    STRING(REGEX REPLACE "^.*yacc - (.*)$" "\\1"
      YACC_VERSION "${YACC_version_output}")
  ENDIF()

  #============================================================
  # YACC_TARGET (public macro)
  #============================================================
  #
  MACRO(YACC_TARGET Name Input Output)
    SET(YACC_TARGET_usage "YACC_TARGET(<Name> <Input> <Output> [COMPILE_FLAGS <string>]")
    IF(${ARGC} GREATER 3)
      IF(${ARGC} EQUAL 5)
        IF("${ARGV3}" STREQUAL "GENERATOR_FLAGS")
          SET(YACC_EXECUTABLE_opts  "${ARGV4}")
          SEPARATE_ARGUMENTS(YACC_EXECUTABLE_opts)
        ELSE()
          MESSAGE(SEND_ERROR ${YACC_TARGET_usage})
        ENDIF()
      ELSE()
        MESSAGE(SEND_ERROR ${YACC_TARGET_usage})
      ENDIF()
    ENDIF()

    ADD_CUSTOM_COMMAND(OUTPUT ${Output}
      COMMAND ${YACC_EXECUTABLE}
      ARGS ${YACC_EXECUTABLE_opts} -o${Output} ${Input}
      DEPENDS ${Input}
      COMMENT "[YACC][${Name}] Building generator with yacc ${YACC_VERSION}"
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

    SET(YACC_${Name}_DEFINED TRUE)
    SET(YACC_${Name}_OUTPUTS ${Output})
    SET(YACC_${Name}_INPUT ${Input})
    SET(YACC_${Name}_COMPILE_FLAGS ${YACC_EXECUTABLE_opts})
  ENDMACRO(YACC_TARGET)
  #============================================================


ENDIF(YACC_EXECUTABLE)

INCLUDE(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(YACC REQUIRED_VARS YACC_EXECUTABLE
                                       VERSION_VAR YACC_VERSION)

# FindYACC.cmake ends here
