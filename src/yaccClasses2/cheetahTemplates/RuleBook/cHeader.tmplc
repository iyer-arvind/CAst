\#ifndef CAST_HEADER_INCLUDED
\#define CAST_HEADER_INCLUDED
\#include <string>
\#include <vector>
\#include <stack>
\#include <map>
\#include <exception>
\#include <assert.h>
\#include <iostream>
\#include <sstream>
\#include <stdlib.h>

\#define COL_CLEAR 	"\033[0m"
\#define COL_FG_RED 	"\033[31m"
\#define COL_FG_GREEN 	"\033[32m"
\#define COL_FG_YELLOW 	"\033[33m"
\#define COL_FG_BLUE 	"\033[34m"
\#define COL_FG_MAGENTA "\033[35m"
\#define COL_FG_CYAN	"\033[36m"
\#define COL_FG_WHITE 	"\033[37m"

\#define COL_BG_RED 	"\033[41m"
\#define COL_BG_GREEN 	"\033[42m"
\#define COL_BG_YELLOW 	"\033[43m"
\#define COL_BG_BLUE 	"\033[44m"
\#define COL_BG_MAGENTA "\033[45m"
\#define COL_BG_CYAN	"\033[46m"
\#define COL_BG_WHITE 	"\033[47m"



\#define LOG(TXT) {std::cerr<<__FILE__<<" "<<__LINE__<<" :"<<TXT<<COL_CLEAR<<"\n";std::cerr.flush();}

namespace CAst
{

class IndexError: public std::exception
{
  virtual const char* what() const throw()
  {
    return "Index out of range";
  }
};



class ValueError: public std::exception
{
  private:
	const std::string& _check;
  public:
	ValueError(const std::string& check):
			std::exception(),
			_check(check)
	{}
  virtual const char* what() const throw()
  {
    return _check.c_str();
  }
};

class TypeError: public std::exception
{
  public:
  virtual const char* what() const throw()
  {
    return "Error converting type";
  }
};

//! This is the enumeration of the class ids 
###set ID_LIST=[("ID_CAST",0),("ID_TOKEN",1)]
###for r in $object:
###set h=$object[$r].handler
###if $len($h.handlers)>1 
###echo ID_LIST.append(("ID_"+$r.upper(),$object[$r].classId))
##	#if $h.__class__.__name__=="ListHandlerGroup":
###echo ID_LIST.append(("ID_"+$r.upper()+"_ITEM",$object[$r].classId+1))
##	#end if
###else
##	#if $h.__class__.__name__=="ListHandlerGroup":
###echo ID_LIST.append(("ID_"+$r.upper(),$object[$r].classId))
##	#end if
###end if
###for i,hh in enumerate($h.handlers)
###set nn="ID_"+$hh.className.upper()
###set n=$object[$r].classId+$i+(1 if $len($h.handlers)>1 else 0)+(1 if $h.__class__.__name__=="ListHandlerGroup" else 0)
###echo ID_LIST.append(($nn,$n))
###end for
###end for

enum CAST_CLASS_ID
{
#for n,i in sorted($utils.classId.getClassId($object),key=lambda x:x[1])
	#set nn="%40s"%("ID_"+$n.upper())
	$nn = $i,
#end for
};







/**
 *  \brief Simple Reference Counting class
 *
 *  This class is to be inherited by the CAst classes. This is a simple reference counting class
 */
template <typename DataType>
class ReferenceCountedAutoPointer
{
	private:
		int *__refCount;					///< The reference count
		DataType *__data;

		
		/**
		 * \brief Clears the reference count
		 *
		 * This first decrements the reference count, next, checks if this is the sole refernce. If so, clear() is called
		 */
		void __clear()
		{
			if(!__refCount)return;
			__refCountDown();
			LOG(COL_FG_RED<<"Deleting "<<__data<<"("<<__data->name()<<")"<<"? refCount:"<<*__refCount)
			if((*__refCount)==0)
			{
				std::string name=__data->name();
				DataType *add=__data;
				LOG(COL_FG_YELLOW<<"Deleting "<<"("<<name<<") "<<__data)
				delete __refCount;
				delete __data;
				LOG(COL_FG_RED<<"Deleted "<<"("<<name<<") "<<add)
			}
			__refCount=0;
			__data=0;
		}
		/**
		 * \brief Increments the reference count
		 */
		void __refCountUp(){if(__refCount)(*__refCount)++;}

		
		/**
		 * \brief Decrements the reference count
		 */
		void __refCountDown(){if(__refCount)(*__refCount)--;}
	public:
		static CAST_CLASS_ID DATA_ID;
	public:
		/**
		 * \brief Default constructor
		 * 
		 *  Initializes the reference count and data to 0
		 */
			
		ReferenceCountedAutoPointer():
				__data(0),
				__refCount(0)
		{
			LOG(COL_FG_RED<<"NULL DATA")
		}

		/** 
		 * \brief Constructor with data
                 *
                 * Initializes the reference count and data to 0 if data is void, else sets the data
                 */
		
		ReferenceCountedAutoPointer(DataType *data)
		{
			if(data)
			{
				LOG(COL_FG_YELLOW<<"ADOPTING "<<data<<"("<<data->name()<<")")
				__data=data;
				__refCount=new int(1);
			}
			else
			{
				LOG("NULL DATA "<<data)
				__data=0;
				__refCount=0;
			}
		}
		
		/**
		 * \brief Copy constructor
		 * 
		 * Adopts the other's reference count and increments the reference count
                 *
                 */
		ReferenceCountedAutoPointer(const ReferenceCountedAutoPointer&other ):				
				__refCount(other.__refCount),
				__data(other.__data)
		{
			__refCountUp();

			if(__data)
				LOG(COL_FG_YELLOW<<"SHARING "<<__data<<" refcount:"<<*__refCount<<"("<<__data->name()<<")")
			else
				LOG(COL_FG_RED<<"NULL AP ")
		
		}

		template<typename Y>
		friend class ReferenceCountedAutoPointer;


		template<typename Y>
		ReferenceCountedAutoPointer(const ReferenceCountedAutoPointer<Y>&other ):
				__data(0),
				__refCount(0)
		{
			
			if(!other.__data)
			{
				LOG(COL_FG_RED<<"NULL AP ")
				return;
			}
			LOG(COL_FG_RED<<COL_BG_YELLOW<<"Converting "<<"from "<<other->name()<<" to "<<DataType::ID)
			__data=dynamic_cast<DataType*>(other.__data);
			if(!__data)
			{
				LOG(COL_FG_RED<<COL_BG_YELLOW<<"TUNNELING ")
				ReferenceCountedAutoPointer<DataType> _other=CAstCast((ReferenceCountedAutoPointer<DataType>&)other,DataType::ID);
				LOG(COL_FG_RED<<COL_BG_YELLOW<<"TUNNELING Done successfully")
				__data=_other.__data;
				__refCount=_other.__refCount;
				__refCountUp();
			}
			else
			{
		                LOG(COL_FG_RED<<COL_BG_YELLOW<<"dynamic_cast worked")
				__refCount=other.__refCount;
				__refCountUp();
			}
		}
		/**
		 * \brief Assignment operator
                 *
                 * Decrements the current reference count, and adopts the other's reference count and increments it
                 */
		ReferenceCountedAutoPointer& operator=(const ReferenceCountedAutoPointer&other)
		{
			__clear();
			__refCount=other.__refCount;
			__data=other.__data;
			__refCountUp();
			return *this;
		}
		template<typename Y>
		ReferenceCountedAutoPointer& operator=(const ReferenceCountedAutoPointer<Y>&other)
		{
			__clear();
			__refCount=other.__refCount;
			__data=dynamic_cast<DataType*>(other.__data);
			if(!__data)
			{
				throw TypeError();
			}
			__refCountUp();
			return *this;
		}
		/**
		 * \brief Returns the reference count
		 */
		const int refCount()const{return *__refCount;}

		/**
		 * \brief returns if the data is null
		 */		
		const bool isNull()const{return __data==0;}


		
		DataType* operator->()
		{
			return __data;
		}

		const DataType* operator->()const
		{
			return __data;
		}

		DataType& operator*()
		{
			return *__data;
		}
		const DataType& operator*()const
		{
			return *__data;
		}
		void clear()
		{
			__clear();
		}
		/**
		 * \brief Calls __clear();
		 */
		virtual ~ReferenceCountedAutoPointer()
		{
			__clear();
		}
			
};

typedef std::map<std::string,std::string> GraphProps;

template<typename DataType>
CAST_CLASS_ID ReferenceCountedAutoPointer<DataType>::DATA_ID=DataType::ID;

/**
 *
 * \brief The main base class of all CAst classes
 * 
 */
class CAst
{
	private:
		static unsigned int nodeCount;
		unsigned int _nodeId;
	public:
		CAst():_nodeId(nodeCount++)
		{}
		
		virtual unsigned int nodeId()const {return _nodeId;}

		static CAST_CLASS_ID ID;
		/** Returns the name of the class */
		virtual std::string name()const=0;

		/** Returns the class ID of the class */
		virtual CAST_CLASS_ID classId()const=0;

		/** The destructor */
		virtual ~CAst()
		{
			LOG("DELETED:"<<_nodeId)
		}

		virtual std::ostream& codeStream(std::ostream& stream)const=0;
		virtual std::ostream& graphStream(std::ostream& stream,GraphProps graphProps=GraphProps())const=0;

		std::string code()const
		{
			std::stringstream stream;
			codeStream(stream);
			return stream.str();
		}

		std::string graph()const
		{
			std::stringstream stream;
			stream<<"digraph G\n{\n";
			stream<<"edge [labelfontsize=6];\n";
			graphStream(stream);
			stream<<"}\n";
			return stream.str();
		}

};
namespace Ptr
{
	typedef ReferenceCountedAutoPointer<CAst> CAst;
}

class token:public CAst
{
	private:
		std::string _text;
	public:
		static CAST_CLASS_ID ID;
	public:
		/** The constructor takes the string*/
		token(std::string text):
			_text(text),
			CAst()
		{}


		const std::string& text()const {return _text;}
		/** Returns the name of the class */
		virtual std::string name()const{return "token";};

		/** Returns the class ID of the class */
		virtual CAST_CLASS_ID classId()const{return ID_TOKEN;};

		/** Prints the code for the node */
		std::ostream& codeStream(std::ostream& stream)const{return stream<<" "<<_text;}

		/** Prints the ast of the node */
		std::ostream& graphStream(std::ostream& stream,GraphProps graphProps=GraphProps())const
		{

			stream<<"node_"<<this->nodeId();
			if(graphProps.count("memberName"))stream<<"[label=\""<<graphProps["memberName"]<<"\"]";
			stream<<";\n";



			if(_text[0]=='\"')
			return stream<<"node_"<<nodeId()<<" [label="<<_text<<", fillcolor=grey];\n";
			return stream<<"node_"<<nodeId()<<" [label=\""<<_text<<"\", fillcolor=grey];\n";
		}
		
		/** The destructor */
		virtual ~token()
		{}
};


namespace Ptr
{
	typedef ReferenceCountedAutoPointer<token> token;
}


\#define AssertNotNullRule(rule) assert(!rule.isNull());
\#define AssertTokenType(expr) if(!(expr)){std::cerr<<"Assertion: '"<<\#expr<<"' failed @"<<__FILE__<<__LINE__;throw ValueError(\#expr);};

#for i in $object:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RULE:$i
//////////////////////////////////////////


$object[$i].dump("cHeader")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////










#end for


typedef  ReferenceCountedAutoPointer<CAst> CAstPtr;
void __initialize_cast_routes__() __attribute__((constructor));
CAstPtr CAstCast(CAstPtr obj,CAST_CLASS_ID toId);



}

inline CAst::Ptr::token _T(std::string s)
{
	return CAst::Ptr::token(new CAst::token(s));
}

\#define CAP(TYPE,OBJ) CAst::ReferenceCountedAutoPointer<CAst::TYPE>(obj)
\#include <cstdio>
extern "C"
{
        int yylex(void);  
	int yyerror(const char *s);
	int yylex_destroy();
        int yyparse();  
}

extern CAst::$object.yaccFile.start *root;
CAst::ReferenceCountedAutoPointer<CAst::$object.yaccFile.start> parseFile(const char* fileName);

\#endif
