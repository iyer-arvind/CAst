

#def createListClass($object)
/**
 * \brief The basic class to handle ${object.ruleName}
 *
 * Since the rule contains itself, this rule will be implemented in the form of a list
 */
class $object.ruleName:public CAst
{
	public:
		typedef ${object.ruleName}_item ItemType;
		typedef std::vector<ReferenceCountedAutoPointer< ItemType > > ${object.ruleName}ListType;	///< This defines the list type which will store the ${object.ruleName}_item
		typedef ${object.ruleName}ListType::iterator ${object.ruleName}IterType;				///< This defines the iterator over ${object.ruleName}ListType
		typedef ${object.ruleName}ListType::const_iterator C${object.ruleName}IterType;				///< This defines the constant iterator over ${object.ruleName}ListType

	private:
		${object.ruleName}ListType _itemList;									///< The list of items
	public:
		static CAST_CLASS_ID ID;
		
	public:
		/**
		 * \brief The default constructor calls the parent constructor
		 *
		 */
		${object.ruleName}():
				CAst(),
				_itemList()
		{
			LOG("Created List object of $object.ruleName: "<<this)
		}

		/**
		 * \brief Append an item to the back of the list
		 *
		 */
		void append( ReferenceCountedAutoPointer<${object.ruleName}_item> item)
		{
			LOG(COL_FG_GREEN<<"Appending to $object.ruleName: "<<this)
			_itemList.push_back(item);
		}

		/**
		 * \brief Prepend an item to the front of the list
		 *
		 */
		void prepend( ReferenceCountedAutoPointer<${object.ruleName}_item> item)
		{
			LOG(COL_FG_GREEN<<"Prepending to $object.ruleName: "<<this)
			_itemList.insert(_itemList.begin(),item);
		}
		
		int size()const
		{
			return _itemList.size();
		}
		/**
                 * \brief Returns the name of the class.
                 *
                 * Returns the name of the class. Here, returns <b>"${object.ruleName}"</b>
		 * \returns <b>"${object.ruleName}"</b>
                 */
		virtual std::string name()const {return "$object.ruleName";}
		
		/**
                 * \brief Returns the ID of the class
                 *
                 * Returns the ID of the class. Here, returns ID_$object.ruleName.upper()
		 * \returns  ID_$object.ruleName.upper()
                 */
		virtual CAST_CLASS_ID classId()const		{return ID_$object.ruleName.upper();}


		ReferenceCountedAutoPointer<ItemType>& operator[](int i)
		{
			if(i<0)i+=_itemList.size(); 
			if(i<0 or i>=_itemList.size()) 
				throw IndexError(); 
			return _itemList[i];
		}

		const ReferenceCountedAutoPointer<ItemType>& operator[](int i)const
		{
			if(i<0)i+=_itemList.size(); 
			if(i<0 or i>=_itemList.size()) 
				throw IndexError(); 
			return _itemList[i];
		}



		/**
		 * \brief Writes code to the code stream
		 *
		 *
		 */
		virtual std::ostream& codeStream(std::ostream& stream)const
		{
			for(C${object.ruleName}IterType i=_itemList.begin();i!=_itemList.end();i++)
			{
				(*i)->codeStream(stream);
			}
			return stream;
		}

		virtual ~${object.ruleName}(){}
};

namespace Ptr
{
	typedef ReferenceCountedAutoPointer<${object.ruleName}> ${object.ruleName};
}

#end def
