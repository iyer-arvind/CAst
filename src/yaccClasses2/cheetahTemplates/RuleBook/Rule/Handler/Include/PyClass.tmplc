
#attr $registry = {}

#def addToRegister(stream,objName,mod)
##// GENERATED BY $self.__class__.__name__
#if $stream not in $registry
#set $self.registry[$stream]=dict()
#end if
#if $objName not in $registry[$stream]:
#set $self.registry[$stream][$objName]=set()
#end if
#echo $self.registry[$stream][$objName].add($mod)
#end def



#def  newSource($object)
#set name=$object.className
$addToRegister("source",$name,"new")
static PyObject * PyCAst_new_${name}(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    LOG(COL_FG_CYAN<<"new PyCAst::$name");
    PyCAst_object_${name} *self;
    self = (PyCAst_object_${name}*)type->tp_alloc(type, 0);
    return (PyObject *)self;
}
#end def


#def  deallocSource($object)
#set name=$object.className
$addToRegister("source",$name,"dealloc")
static void PyCAst_dealloc_${name}(PyObject *_self)
{
    LOG(COL_FG_MAGENTA<<"Deallocating PyCAst::${name}");
    PyCAst_object_${name} *self=(PyCAst_object_${name}*)_self;
    self->_p_cast_object.clear();
    self->ob_type->tp_free((PyObject*)self);
}
#end def


#def  initSource($object)
#set name=$object.className
$addToRegister("source",$name,"init")
static int PyCAst_init_${name}(PyCAst_object_${name} *self, PyObject *args, PyObject *kwds)
{
    LOG(COL_FG_CYAN<<"initializing PyCAst::${name} with "<<PyTuple_Size(args)<<" arguments");
#set nArg=0
#for p in $object.parameters
#if $p.isIncluded
#set nArg=$nArg+1
#end if
#end for
	
	if(PyTuple_Size(args)!=$nArg)
	{
		LOG("Detected insufficient arguments")
		PyErr_SetString(PyExc_TypeError,"Insufficient number of arguments. Expecting $nArg argument(s).");
		return -1;
	}
	LOG("Parsing Arguments")
#set nArg=0
#set args=[]
#set checks=[]


#for p in $object.parameters
#if $p.isIncluded
    	PyCAst_object_${p.parameterType.name}* $p.argName=(PyCAst_object_${p.parameterType.name}*)PyTuple_GetItem(args,$nArg);
	if((PyObject*)$p.argName==Py_None)
	{
		Py_DECREF($p.argName);
		#if None in $p.possibleValues:
		$p.argName=(PyCAst_object_${p.parameterType.name}*)PyCAst_new_${p.parameterType.name}(&PyCAst_type_${p.parameterType.name},NULL,NULL);
		#else
		PyErr_SetString(PyExc_TypeError,"Parameter ${nArg+1} cannot be None");
		return -1;
		#end if
	}
	#set $nArg=$nArg+1
#echo $args.append($p.argName)
#echo $checks.append( "CHECK_PYTHON_ARG_TYPE("+str($p.argIndex+1)+", "+$p.argName+","+$p.parameterType.name+")")
#end if
#end for

#if len($args)
#set argsStr=",".join($args)
#set argObjects=",".join([a+"->_p_cast_object" for a in $args])
    self->_p_cast_object=CAst::ReferenceCountedAutoPointer<CAst::$name>(new CAst::${name}($argObjects));
#else
    self->_p_cast_object=CAst::ReferenceCountedAutoPointer<CAst::$name>(new CAst::${name}());
#end if
    return 0;
}
#end def



#def listLengthSource($object)
#set name=$object.className
$addToRegister("source",$name,"list.length")
static Py_ssize_t PyCAst_list_length_${name}(PyObject *_self)
{
	PyCAst_object_${name} *self=(PyCAst_object_${name}*)(_self);
	if(self->_p_cast_object.isNull())return 0;
	return self->_p_cast_object->size();
	
}
#end def

#def listItemSource($object)
#set name=$object.className
$addToRegister("source",$name,"list.item")
static PyObject* PyCAst_list_item_${name}(PyObject *_self,Py_ssize_t index)
{
	PyCAst_object_${name} *self=(PyCAst_object_${name}*)(_self);
	if(self->_p_cast_object.isNull())Py_RETURN_NONE;
	if(abs(index)>self->_p_cast_object->size()) PyErr_SetString(PyExc_IndexError,"Index out of range");
	CAst::ReferenceCountedAutoPointer<CAst::${name}_item> item=self->_p_cast_object->operator[](index);
	
	return CAstToPyCAst(item);
	##PyCAst_object_${name}_item *pyItem=(PyCAst_object_${name}_item *)PyCAst_new_${name}_item(&PyCAst_type_${name}_item,NULL,NULL);
	##pyItem->_p_cast_object=item;
	##return (PyObject*)pyItem;
}

#end def







#def boolGetterSource($object,$propName,$funcName,$checkNull)
#set name=$object.className
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self)
{
	PyCAst_object_${name} *self=(PyCAst_object_${name}*)(_self);

#if $checkNull	
	if(self->_p_cast_object.isNull())
		Py_RETURN_NONE;
#end if
	
	if(self->_p_cast_object${funcName})	{Py_RETURN_TRUE;}
	else					{Py_RETURN_FALSE;}
}
#end def

#def stringGetterSource($object,$propName,$funcName,$checkNull)
#set name=$object.className
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self)
{
	PyCAst_object_${name} *self=(PyCAst_object_${name}*)(_self);
#if $checkNull	
	if(self->_p_cast_object.isNull())
		Py_RETURN_NONE;
#end if
	
	return PyString_FromString
	(
		self->_p_cast_object${funcName}.c_str()
	);
}
#end def

#def intGetterSource($object,$propName,$funcName,$checkNull)
#set name=$object.className
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self)
{
	PyCAst_object_${name} *self=(PyCAst_object_${name}*)(_self);
#if $checkNull	
	if(self->_p_cast_object.isNull())
		Py_RETURN_NONE;
#end if
	
	return PyInt_FromLong
	(
		self->_p_cast_object${funcName}
	);
}
#end def


#def castGetterSource($object,$propName,$typeName)
#set name=$object.className
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self)
{
	PyCAst_object_${name} *self=(PyCAst_object_${name}*)(_self);
	if(self->_p_cast_object.isNull())
		Py_RETURN_NONE;
	
	return CAstToPyCAst(self->_p_cast_object->p_${propName}());
	##PyCAst_object_${typeName} *pyObj=(PyCAst_object_${typeName}*)PyCAst_new_${typeName}(&PyCAst_type_${typeName},NULL,NULL);
	##pyObj->_p_cast_object=self->_p_cast_object->p_${propName}();
	##return (PyObject*)pyObj;
}
#end def

#def stdAttributeSource($object)
##$stringGetterSource($object,"text","->text()",$True)
$stringGetterSource($object,"code","->code()",$True)
$boolGetterSource($object,"isNull",".isNull()",$False)
$intGetterSource($object,"refCount",".refCount()",$True)
#if object.__class__.__name__=="dict" 
#if $object.has_key("listClass")
$intGetterSource($object,"size","->size()",$True)
#end if
#else
#for p in $object.parameters
#if p.isIncluded
$castGetterSource($object,$p.memName.replace("_p_",""),$p.parameterType.name)
#end if
#end for
#end if 
#end def



#def stdClassSource($object,$noParts=[])
#if "noNew" not in $noParts: 	$newSource($object)
#if "noDeallocator" not in $noParts: 	$deallocSource($object)
#if "noInit" not in $noParts: 	$initSource($object)
#if "noStdAttribute" not in $noParts:	$stdAttributeSource($object)
#if object.__class__.__name__=="dict" 
#if $object.has_key("listClass")
$listLengthSource($object)
$listItemSource($object)
#end if
#end if
#end def













#def  newHeader($object)
#set name=$object.className
$addToRegister("header",$name,"new")
static PyObject * PyCAst_new_${name}(PyTypeObject *type, PyObject *args, PyObject *kwds);
#end def


#def  deallocHeader($object)
#set name=$object.className
$addToRegister("header",$name,"dealloc")
static void PyCAst_dealloc_${name}(PyObject *_self);
#end def


#def  initHeader($object)
#set name=$object.className
$addToRegister("header",$name,"init")
static int PyCAst_init_${name}(PyCAst_object_${name} *self, PyObject *args, PyObject *kwds);
#end def


#def listLengthHeader($object)
#set name=$object.className
$addToRegister("header",$name,"list.length")
static Py_ssize_t PyCAst_list_length_${name}(PyObject *_self);
#end def

#def listItemHeader($object)
#set name=$object.className
$addToRegister("header",$name,"list.item")
static PyObject* PyCAst_list_item_${name}(PyObject *_self,Py_ssize_t index);
#end def






#def  objectStructHeader($object)
#set name=$object.className
$addToRegister("header",$name,"objectStruct")
typedef struct
{
	PyObject_HEAD
	CAst::ReferenceCountedAutoPointer<CAst::$name> _p_cast_object;
}PyCAst_object_$name;
#end def


#def boolGetterHeader($object,$propName)
#set name=$object.className
$addToRegister("header",$name,"getter."+$name+"_"+$propName)
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self);
#end def

#def stringGetterHeader($object,$propName)
#set name=$object.className
$addToRegister("header",$name,"getter."+$name+"_"+$propName)
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self);
#end def

#def intGetterHeader($object,$propName)
#set name=$object.className
$addToRegister("header",$name,"getter."+$name+"_"+$propName)
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self);
#end def

#def castGetterHeader($object,$propName)
#set name=$object.className
$addToRegister("header",$name,"getter."+$name+"_"+$propName)
static PyObject *PyCAst_getter_${name}_${propName}(PyObject *_self);
#end def






#def stdAttributeHeader($object)
##$stringGetterHeader($object,"text")
$stringGetterHeader($object,"code")
$boolGetterHeader($object,"isNull")
$intGetterHeader($object,"refCount")
#if object.__class__.__name__=="dict" 
#if $object.has_key("listClass")
$intGetterHeader($object,"size")
#end if
#else
#for p in $object.parameters
#if p.isIncluded
$castGetterHeader($object,$p.memName.replace("_p_",""))
#end if
#end for
#end if 
#end def





#def stdClassHeader($object,$noParts=[],specialAttributes=[])
#if "noObjectStruct" 		not in $noParts: $objectStructHeader($object)
#if "noNew" 			not in $noParts: $newHeader($object)
#if "noDealloc" 		not in $noParts: $deallocHeader($object)
#if "noInit" 			not in $noParts: $initHeader($object)
#if object.__class__.__name__=="dict" 
#if $object.has_key("listClass")
$listLengthHeader($object)
$listItemHeader($object)
#end if
#end if 
#if "noStdAttribute" 		not in $noParts: $stdAttributeHeader($object)
#if "noArrays" 			not in $noParts: $arraysHeader($object)
#if "noTypeStruct" 		not in $noParts: $typeStructHeader($object)
#end def

#def  arraysHeader($object)
#set name=$object.className
$addToRegister("header",$name,"arrays")
static PyGetSetDef PyCAst_getsetter_$name [] = 
	{
#set getters=[ i.split('.')[1] for i in $registry["header"][$name] if i.startswith("getter.")]
#for g in getters:
#set n=$g.replace($name+"_","")
	{(char*)"${n}", (getter)PyCAst_getter_$g,NULL,(char*)"${g}", NULL},
#end for
		NULL 
	};
static PyMethodDef PyCAst_methods_$name [] = 
	{
		{NULL}
	};
static PyMemberDef PyCAst_members_$name [] = 
	{
		{NULL}
	};
#end def



#def listSuiteStruct($object)
#set name=$object.className
#set flags=$registry["header"][$name]
static PySequenceMethods PyCAst_list_$object.className =
{
        /* sq_length        */ (lenfunc) ${ "PyCAst_list_length_"+$name if "list.length" in $flags else 0 },
        /* sq_concat        */ 0,
        /* sq_repeat        */ 0,
        /* sq_item          */ (ssizeargfunc) ${ "PyCAst_list_item_"+$name if "list.item" in $flags else 0 },
        /* sq_slice         */ 0,
        /* sq_ass_item      */ 0,
        /* sq_ass_slice     */ 0,
        /* sq_contains      */ 0,
        /* sq_inplace_concat*/ 0,
        /* sq_inplace_repeat*/ 0
} ;

#end def





#def  typeStructHeader($object)
#set listSuite = 0
#if object.__class__.__name__=="dict" 
#if $object.has_key("listClass")
$listSuiteStruct($object)
#set listSuite = "&PyCAst_list_"+$object.className
#end if
#end if

#set name=$object.className
#set flags=$registry["header"][$name]
#set new="PyCAst_new_"+$name if "new" in $flags else 0
#set init="(initproc)PyCAst_init_"+$name if "init" in $flags else 0
#set dealloc="(destructor)PyCAst_dealloc_"+$name if "dealloc" in $flags else 0
#set getsetters="PyCAst_getsetter_"+$name if "arrays" in $flags else 0
#set methods="PyCAst_methods_"+$name if "arrays" in $flags else 0
#set members="PyCAst_members_"+$name if "arrays" in $flags else 0
static PyTypeObject  PyCAst_type_${name} = 
{
	                                PyObject_HEAD_INIT(NULL)
	/* ob_size -------------*/      0,
	/* tp_name--------------*/      "CAst.${name}",
	/* tp_basicsize---------*/      sizeof(PyCAst_object_${name}),
	/* tp_itemsize----------*/      0,
	/* tp_dealloc-----------*/      $dealloc,
	/* tp_print-------------*/      0,
	/* tp_getattr-----------*/      0,
	/* tp_setattr-----------*/      0,
	/* tp_compare-----------*/      0,
	/* tp_repr--------------*/      0,
	/* tp_as_number---------*/      0,
	/* tp_as_sequence-------*/      $listSuite,
	/* tp_as_mapping--------*/      0,
	/* tp_hash--------------*/      0,
	/* tp_call--------------*/      0,
	/* tp_str---------------*/      0,
	/* tp_getattro----------*/      0,
	/* tp_setattro----------*/      0,
	/* tp_as_buffer---------*/      0,
	/* tp_flags-------------*/      Py_TPFLAGS_DEFAULT,
	/* tp_doc---------------*/      "Object representing the ${name}",
	/* tp_traverse----------*/      0,
	/* tp_clear-------------*/      0,
	/* tp_richcompare-------*/      0,
	/* tp_weaklistoffset----*/      0,
	/* tp_iter--------------*/      0,
	/* tp_iternext----------*/      0,
	/* tp_methods-----------*/      ${methods},
	/* tp_members-----------*/      ${members},
	/* tp_getset------------*/      ${getsetters},
	/* tp_base--------------*/      0,
	/* tp_dict--------------*/      0,
	/* tp_descr_get---------*/      0,
	/* tp_descr_set---------*/      0,
	/* tp_dictoffset--------*/      0,
	/* tp_init--------------*/      $init,
	/* tp_alloc-------------*/      0,
	/* tp_new---------------*/      $new,
	
};
#end def


#def moduleInit()
\#ifndef PyMODINIT_FUNC
\#define PyMODINIT_FUNC void
\#endif
PyMODINIT_FUNC
initPyCAst(void) 
{
#for f in $registry["header"]:
	if (PyType_Ready(&PyCAst_type_${f}) < 0) {printf("Initialization of ${f} FAILED");return;}
#end for


	PyObject* m;
	m = Py_InitModule3("PyCAst", module_methods,"The PyCAst Module");
	if (m == NULL) return;

#for f in $registry["header"]:
	Py_INCREF(&PyCAst_type_${f});
	PyModule_AddObject(m,"${f}", (PyObject *)&PyCAst_type_$f);
#end for
}

#end def
