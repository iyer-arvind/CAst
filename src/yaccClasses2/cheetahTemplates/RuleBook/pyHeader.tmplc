\#include "Python.h"
\#include <structmember.h>


#set tokObj={"className":"token"}
$utils.pyClassCreator.stdClassHeader($tokObj)


#for rn in $object:
$object[$rn].dump("pyHeader")
#end for





PyObject * CAstToPyCAst(CAst::ReferenceCountedAutoPointer<CAst::CAst> pointer)
{
	if(pointer.isNull())Py_RETURN_NONE;
	int id=pointer->classId();
	LOG("Received object with id"<<id)
	switch(id)
	{
#for typ,id in $utils.classId.getClassId($object)
#if $id:
		case $id:
		{
			LOG(COL_FG_GREEN<<" Casting $typ with id $id to PyCAst_object_${typ}")
			PyCAst_object_${typ} *pyObj=(PyCAst_object_${typ}*)PyCAst_new_${typ}(&PyCAst_type_${typ},NULL,NULL);
			pyObj->_p_cast_object=pointer;
			return (PyObject*)pyObj;
		}
#end if
#end for
		default:
		{
			LOG(COL_FG_RED<<"INVALID ID")
			Py_RETURN_NONE;
		}
	}
	
	
}
