\#include "CAst.py.h"


    
\#define CHECK_PYTHON_ARG_TYPE(NUM,ARG,TYP) {if(ARG->ob_type!=PyCAst_type_\#\#TYP)PyErr_SetString(PyExc_TypeError,"test");}

#set tokObj={"className":"token"}
$utils.pyClassCreator.newSource($tokObj)
$utils.pyClassCreator.deallocSource($tokObj)
##$utils.pyClassCreator.initSource($tokObj)

static int PyCAst_init_token(PyCAst_object_token *self, PyObject *args, PyObject *kwds)
{
    const char *s;
    LOG(COL_FG_CYAN<<"initializing PyCAst::token");
    if(! PyArg_ParseTuple(args, "s", &s))  
	return -1;
    LOG(COL_FG_CYAN<<"text:"<<s);
    PyObject *text=NULL;
    self->_p_cast_object=CAst::ReferenceCountedAutoPointer<CAst::token>(new CAst::token(s));
    return 0;
}
$utils.pyClassCreator.stdAttributeSource($tokObj)




#for rn in $object:
$object[$rn].dump("pySource")
#end for


static PyObject * parseFile(PyObject *self, PyObject *args)
{
	if(PyTuple_Size(args)!=1)
	{
		LOG("Detected insufficient/excessive arguments")
		PyErr_SetString(PyExc_TypeError,"Insufficient number of arguments. Expecting 1 argument.");
		Py_RETURN_NONE;
	}
	LOG("Parsing Arguments")
	PyObject *fn=PyTuple_GetItem(args,0);
	if(!PyString_Check(fn))
	{
		LOG("Detected incorrect argument")
		PyErr_SetString(PyExc_TypeError,"Expecting a string");
		Py_RETURN_NONE;
	}
	const char* fileName=PyString_AsString(fn);

	CAst::ReferenceCountedAutoPointer<CAst::translation_unit> root=parseFile(fileName);
	return CAstToPyCAst(root);

	##PyCAst_object_translation_unit *pyRoot=(PyCAst_object_translation_unit*)PyCAst_new_translation_unit(&PyCAst_type_translation_unit, NULL, NULL);
	##pyRoot->_p_cast_object=root;
	##return (PyObject*)pyRoot;
}

static PyMethodDef module_methods[] = {	{"parseFile",parseFile, METH_VARARGS,"Parses a File for CAST"},{ NULL,NULL,0,NULL }};



$utils.pyClassCreator.moduleInit()

