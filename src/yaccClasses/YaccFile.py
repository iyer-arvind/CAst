

from Token import Token
from Pattern import Pattern
from Rule import Rule
import os
import ClassCode

class YaccFile(object):
	def __init__(self,fileName):
		self.fileName=fileName
		self.__parse()
		self.__resolve()
	

	def __parse(self):
		mode=0
		tokens=[]
		codeLines=[]
		rules={}
		with open(self.fileName) as fh:
			for l in fh:
				l=l.strip('\n')
				if(len(l)==0):
					continue
				if(l.strip()=='%%'):
					mode+=1
					continue
				if(mode==0):
					lspl=l.split()
					if(lspl[0]=="%token"):
						tokens.extend(lspl[1:])
					elif(lspl[0]=="%start"):
						start=lspl[1]
				if(mode==1):
					tokens=dict([(i,Token(i)) for i in tokens])
					if(l[0] not in [' ','\t']):
						l=l.strip()
						rules[l]=[]
						currentRule=l
					else:
						l=l.strip()
						if(l==';'):
							continue
						
						rules[currentRule].append(tuple(l.split()[1:]))
				if(mode>1):
					codeLines.append(l)
		
		
		
		ruleMap=dict([(i,Rule(i)) for i in rules.keys()])
		
		for r in rules:
			rr=ruleMap[r]
			for rTokens in rules[r]:
				ruleMap[r].append([])
				for ra in rTokens:
					if(ra in ruleMap):
						ruleMap[r][-1].append(ruleMap[ra])
					elif(ra in tokens):
						ruleMap[r][-1].append(tokens[ra])
					else:
						tokens[ra]=Token(ra,chrType=True)
						ruleMap[r][-1].append(tokens[ra])
		self.tokens=tokens
		self.codeLines=codeLines
		self.ruleMap=ruleMap
		self.start=start
	
	def __resolve(self):
		for rn in self.ruleMap:
			rule=self.ruleMap[rn]
			rule.resolve()
	
	def dump(self,yaccFileHandle,cHeaderFileHandle,cSourceFileHandle):
		self._dumpYacc(yaccFileHandle)
		self._dumpCHeader(cHeaderFileHandle)
		self._dumpCSource(cSourceFileHandle)

	def _dumpYacc(self,fh):
		for j,t in enumerate([ i for i in self.tokens.values() if i.typeName=='tok' ]):
			if(j%5==0):
				if(j):fh.write("\n")
				fh.write("%token ")
			
			fh.write(t.tokName+" ")
		fh.write("\n%start "+self.start+"\n%%\n\n")
		for rn in self.ruleMap:
			rule=self.ruleMap[rn]
			rule._dumpYacc(fh)
		fh.write("\n%%\n\n")
		for c in self.codeLines:
			fh.write(c+"\n")
		
	def _dumpCHeader(self,fh):
		fh.write("#ifndef CAst_Autogenerated_Header_Included\n#define CAst_Autogenerated_Header_Included\n\n\n")
		fh.write("#define RULE_MARKER(txt) printf(\"\\t\\t\\t\\t\\033[36m%s:%d\\033[0m: %s\\n\",__FILE__,__LINE__,txt)\n")
		fh.write("#define CAST_PTR(TYPE,PTR) dynamic_cast<CAst::TYPE*>(PTR)\n")
		fh.write("#include <string>\n")
		fh.write("#include <stdio.h>\n")
		fh.write("#include <list>\n")
		fh.write("#include <iostream>\n")
		fh.write("#define LOG(txt) std::cerr<<\"[\\033[33m \"<<this<<\" \\033[0m\t]\"<<txt<<\"\\n\";\n")



		fh.write("""
extern "C"
{
    int yylex(void);
    int yyerror(const char *s);
}		""")


		fh.write("namespace CAst\n{\n\n\n")
		fh.write(baseClass)
		for rn in self.ruleMap:
			rule=self.ruleMap[rn]
			rule._dumpCHeader(fh)
		fh.write("\n\n}//namespace CAst\n")
		fh.write("extern YYSTYPE root;\n")
		fh.write("#endif//CAST_Autogenerated_Header_Included\n")
	
	def _dumpCSource(self,fh):
		fh.write("#include \"%s.h\"\n"%(os.path.splitext(os.path.basename(fh.name))[0]))
		fh.write("namespace CAst\n{\n\n")
		for rn in self.ruleMap:
			rule=self.ruleMap[rn]
			rule._dumpCSource(fh)
		fh.write("}//namespace CAst\n")


baseClass="""
class CAst
{
	public:
		virtual std::string name()const=0;
};
class Token
{

};
"""

#	def dumpClasses(self,fileName):
#		with open(fileName+".h","w") as fhh:
#			with open(fileName+".cpp","w") as fhc:
#				fhh.write("#ifndef CTOPY_Autogenerated_Header_Included\n#define CTOPY_Autogenerated_Header_Included\n\n\n")
#				fhh.write("#include <string>\n")
#				fhh.write("namespace CToPy\n{\n\n\n")
#				fhh.write("""
#class CToPyBase
#{
#};
#""")
#				fhh.write("""
#class Token:public CToPyBase
#{
#	std::string _tokName;
#public:
#	Token(CToPyBase *_tokName_):
#		_tokName((const char*)_tokName_)
#	{}
#	virtual std::string className(){return "Token";}
#};
#""")
#				for i in self.ruleMap:
#					fhh.write("//"+i)
#					self.ruleMap[i].dumpClass(fhh,fhc)
#					fhh.write("\n"*3)
#				fhh.write("}//namespace CToPy\n")
#				fhh.write("#endif //CTOPY_Autogenerated_Header_Included")
#				fhc.write("}//namespace CToPy\n")
#			
#		
#
#
